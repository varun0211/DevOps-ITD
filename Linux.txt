To practice - (install git or MobaXterm)

Create a Linux machine in AWS cloud 

1. Create an AWS account 
2. wait for the account to get activated 
3. Search for EC2 service -> Goto Instances -> Launch Instances 
	a. Give a name to the machine (instance)
	b. Choose the OS type (AMI type)
	c. Create and save the Key Pair to login 
4. Create an instance 

In Linux commands are case-sensitive 

A folder is called a Directory in Linux

Know your current path/location 
    pwd - present working directory 

To list files and directories 
     command: ls 
     To list with details (long format): ls -l
     To list with creation time sorted (recent at the top): ls -t
     To list reverse order: ls -r
     All the above together: ls -lrt (OR) ll
       
switch/change to a folder/Directory in Linux (change directory - cd)
    command: cd  
    Syntax: cd <path>/<location>
    example: 1. To change to a Directory in the current location
    		cd test 

create a directory/folder in Linux (make directory - mkdir)
    command: mkdir 
    To create a directory: mkdir <directory_name>
    		example: mkdir test
    To create multiple directories: mkdir <directory_name> <directory_name1> <directory_name2> ..... <directory_name>
    		note: directory names with space separated	
    		example: mkdir test test1 test2 ...	

Delete files/directories (rm)

Use the rm command to delete files and directories. But rm cannot simply delete a directory. Use “rm -r” to delete a directory. In this case, it deletes both the folder and the files in it.
     To remove/delete a file 	
	rm file_name 
     To remove/delete a Directory	
	rm -r directory

Linux path 
  Always Linux path is separate with / 	
   . -> current directory 
   .. -> one step back / Previous one directory 
   ../.. -> Previous two directory

To create an empty file (touch)
    if the file does not exist, the touch command will create an empty file.
    If the file already exists, the touch command will alter the file timestamp to recent.
	touch <file_name>
To display/print the contents of files (cat)
	cat command (short for “concatenate“) allows us to create single or multiple files, view contain
	of a file, concatenate files, and redirect output in the terminal or files.
		cat <file_name>

Vi Editor 
	vi <file_name>

	Command Mode  
		- We can't add any content. This is used to run vi related commands. 
		- Initially when we do vi to a file command mode is the default mode.
	
		Only Save the changes to the file -  ':w'
		To quit from vi - ':q!'
		Save and quit from vi - ':wq!' or (<escape> - Hold shift + zz)
		Save to another file - ':w <new_file>'

		To search a word - '/<word>'

		To display line numbers - ':set nu'

		To replace word - %s/<old_word>/<new_word>/g

		dd - Cut the entire line where the cursor is 
		yy - copy the entire line where the cursor is 
		p - Paste the clip-board content next to the cursor 

	Insert Mode 
		- Is used to add the content to the file.
 		- Press 'i' to enter to insert mode 
 		- Press '<escape>' to exit insert mode and move to command mode.

tail 
tail -n n file.txt 
The tail command, as the name implies, prints the last N number of lines of the given input. By default, it prints the last 10 lines of the specified files.
	# Prints last 5 lines of file.txt
		tail -n 5 file.txt (or) tail -5 file.txt 

head
head -n n file.txt 
The head command, as the name implies, prints the first N number of lines of the given input. By default, it prints the first 10 lines of the specified files.
	# Prints first 5 lines of file.txt
		head -n 5 file.txt (or) head -5 file.txt 

sort
	The sort command accepts input from a text-based file and outputs alphabetically sorted results to the screen.
		sort file.txt
	
	1. You can reverse the order of the sort with the -r option.
		sort -r file.txt
	2. The -f option forces the sort to ignore the case of a letter when ordering lines.
		sort -f file.txt
	3. Duplicate lines can be removed with the -u option (uniq)
		sort -u file.txt
	4. Number based sorting with the -n option
		sort -n file.txt

uniq 

The uniq command accepts input from a text-based file and removes any repeated lines, only if they are adjacent to each other. That’s why it’s used in conjunction with sort to remove non-adjacent lines.
sort file.txt | uniq


ssh
The ssh command is used to securely log into a remote machine and execute commands on that machine. The basic syntax of the command is “ssh user@host”, where the user is the username on the remote machine and the host is the ip address or DNS or hostname of the remote machine.
example: ssh ubuntu@192.168.43.120

Copy the file from one location to another (cp)
    - cp command copies files and directories through the command line.

    To copy to a different location
        cp <source> <destination>    

rename or move the file from one location to another (mv)
    - mv command to move files and directory through the command line. 
    - We can also use the mv command to rename a file/directory.
    To rename a file/directory
        mv old_filename new_filename
        mv old_directory new_directory
    To move to a different location (cut and paste)    
        mv <source> <destination>

Nslookup (Name Server Lookup) 

nslookup is a useful command for getting information on the DNS (website address). It is a network administration tool for querying the Domain Name System (DNS) to obtain IP address mapping or any other DNS record. 
example:
	nslookup google.com
	nslookup 192.168.0.10

chmod 
  - chmod command is used to change the access mode of a file. 
  - The name is an abbreviation of change mode.

  example: 1. Read, write and execute permissions to the file owner: 
              chmod u+rwx <file_name>    
                (OR)
            chmod 700 <file_name>        
        2. Read, write to file owner, Read to groups and Wrtie, Execute to Others: 
              chmod u+rw, g+r, o+wx <file_name>    
                (OR)
            chmod 643 <file_name>

Escape character

    \ 
        - A non-quoted backslash ‘\’ is the Bash escape character. 
        - It preserves the literal value (considers only as string) of the following next character and makes it a string only.

        Below only the character $ will be escaped and treated as string 
            >$  echo "\$var"
            output:    $var    

        - If a \n pair appears, and the backslash itself is not quoted, a newline will be added.

            echo -e "\nThis is to add newline before this echo"

            Multiple newlines 
            echo -e "\nThis is \n to add newline \n before this echo\n"

Write to a File using the Redirection Operator (>)

Redirection allows you to capture the output from a command and overwrite it as input to another command or file.
It will overwrite/Erase all the content of file and add the new content to file.
What ever the content it will written to file and nothing will be print in console.

        echo "This is Redirection of text to file" > file.txt

        To write to a file and also to print the written content in console/terminal 
             echo "This is Redirection of text to file" | Tee file.txt

Append to a File using the double Redirection Operator (>>)

Double Redirection allows you to capture the output from a command and send it as input to another command or file.
It will append the content to the end of file by keeping the old content.

        echo "This is Redirection of text to file" >> file.txt

        To append to a file and also to print the written content in console/terminal 
             echo "This is Redirection of text to file" | Tee -a file.txt
                                         (OR)
             echo "This is Redirection of text to file" | Tee --append file.txt

Bash Scripting 
Variables 
- A bash variable is a temporary storage location for a value. 
- Variables can be used to store any type of data, including strings, numbers, and lists. 

1) Setting a value for a variable.
	variable_name=value
	
2) Reading the value for a variable.
	For referring to or reading a variable we place a $ sign before the variable name.
		echo "$variable_name"	

#) How to store a command output in a variable 
	1) By using the acute or backtick or left quote (`)
		famously known as backtick
		variable=`<any_command>` 
	2) By using shell executor method 
		variable=$(<any_command>) 

Special Variables

$0 - The filename of the current script.
$# - The number of arguments supplied to a script.
$* - All the arguments passed to the script where arguments are space separated and passed as a single string.
$@ - All the arguments passed to the script and it preserves the individual arguments as separate entity.
$? - The status of the last command executed (zero for success and non-zero for failure).
$$ - PID of the current shell. In Bash script, this is the process ID under which they are executing.
$! - PID of the process which is recently sent to background.

Single quote ('') vs Double quote ("")	
	var=10
	('') 
		- Consideres all inside single quotes as String 
		- The $var variable output does not get replaced with the variable value, but displays the variable name within the quotes, i.e., its literal form.

		>$  echo '$var'
		output:	$var

	("") 
		- Looks for assigned values to variable and executes the content. 
		- Running the echo command with double quotes expands the $var variable and outputs the assigned value instead of printing the characters within the quotes.

		>$  echo "$var"
		output:	10	
